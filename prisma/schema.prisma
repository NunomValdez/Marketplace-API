generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // DATABASE_URL="file:./dev.db"
}

model Product {
  id           String           @id @unique @default(uuid())
  name         String
  warehouse_id String
  quantity     Int
  warehouse    warehouse        @relation("productsOfWarehouse", fields: [warehouse_id], references: [id])
  order        OrderToProduct[]
  //  @relation(fields: [order_id], references: [id])
  // order_id     String?

  // orders      Order[]
  // orders ProductsOrders[]

  @@map("Products")
}

model Order {
  id          String           @id @unique @default(uuid())
  shipment_id String?          @unique
  shipment    Shipment?        @relation(fields: [shipment_id], references: [id])
  products    OrderToProduct[]

  // products ProductsOrders[]
  // products    Product[]

  @@map("Orders")
}

model OrderToProduct {
  order_id         String
  product_id       String
  product_quantity Int
  product          Product @relation(fields: [product_id], references: [id], onUpdate: Cascade) //products Ã© o parametro da tabela q se refere ao product_id desta tabela, que aponta para o ID da tabela Product
  order            Order   @relation(fields: [order_id], references: [id])

  @@id([order_id, product_id])
}

model Shipment {
  id           String  @id @unique @default(uuid())
  from_address String
  to_address   String
  order_id     String
  delivered    Boolean @default(false) // this way, admin can see if delivered is true or false

  order Order[]

  @@map("Shipments")
}

model warehouse {
  id       String    @id @unique @default(uuid())
  location String?
  products Product[] @relation("productsOfWarehouse")

  @@map("Warehouses")
}
